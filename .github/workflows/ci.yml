name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Tests y Calidad de Código
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3
    
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cachear dependencias
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black pylint
    
    - name: Análisis de código con flake8
      run: |
        # Detener el build si hay errores de sintaxis o nombres indefinidos
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Advertencias para el resto
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Verificar formato con black
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: Análisis con pylint
      run: |
        pylint **/*.py --exit-zero
      continue-on-error: true
    
    - name: Ejecutar tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Subir reporte de cobertura
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true
    
    - name: Generar reporte de tests
      if: always()
      run: |
        echo "Tests completados"
        
  build:
    name: Build y Verificación
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verificar que la app arranca
      run: |
        timeout 10 python main.py &
        sleep 5
        curl -f http://localhost:8000/health || exit 1
        
  security:
    name: Análisis de Seguridad
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Instalar bandit (security linter)
      run: |
        pip install bandit
    
    - name: Ejecutar análisis de seguridad
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Verificar dependencias vulnerables
      run: |
        pip install safety
        safety check --json
      continue-on-error: true